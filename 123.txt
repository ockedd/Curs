#include <iostream>
#include <locale>
#include <time.h>
#include <fstream>
#include <conio.h>
#include <string>
using namespace std;





int getIntegerFromUser() {
    int value;
    while (true) {
        cin >> value;

        if (cin.fail() || cin.peek() != '\n') { // провал чтения означает не тот тип данных или наличие лишних символов
            cin.clear(); // Сброс состояния потока
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Игнорируем оставшийся ввод до перевода строки
            cout << "Введено некорректное значение. Попробуйте еще раз: ";
        }
        else {
            return value;
        }
    }
}




int** FloydWarshall(const int SIZE, int** a) {
    int** p = new int* [SIZE];
    // Инициализация матрицы предшествования
    for (int i = 0; i < SIZE; i++) {
        p[i] = new int[SIZE];
        for (int j = 0; j < SIZE; j++) {
            if (a[i][j] < 999 && i != j)
                p[i][j] = i;
            else
                p[i][j] = -1;
        }
    }
    // Модификация алгоритма Флойда-Уоршалла для отслеживания предшественников
    for (int k = 0; k < SIZE; ++k) {
        for (int i = 0; i < SIZE; ++i) {
            for (int j = 0; j < SIZE; ++j) {
                if (a[i][k] < 999 && a[k][j] < 999 && a[i][j] > a[i][k] + a[k][j]) {
                    a[i][j] = a[i][k] + a[k][j];
                    p[i][j] = p[k][j]; // Обновление предшествования
                }
            }
        }
    }
    // Проверка на наличие отрицательных циклов
    for (int i = 0; i < SIZE; i++) {
        if (a[i][i] < 0) {
            cout << "Обнаружен отрицательный цикл в вершине: "<< i + 1 << endl;
            return nullptr;
        }
    }
    // Вывод матрицы кратчайших путей
    cout << "Матрица кратчайших путей в графе:" << endl;
    cout << endl;
    for (size_t j = 0; j < SIZE; j++) cout << "\t" << " R" << j + 1;
    cout << endl;
    for (int i = 0; i < SIZE; i++)
    {

        cout << "R" <<  i + 1 << "\t|";
        for (int j = 0; j < SIZE; j++) {
            cout << a[i][j] << "\t|";
        }
        cout <<  endl;
    }
    cout << "Маршруты между вершинами:" << endl;
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (i != j) {
                cout <<"Кратчайший путь из " << i + 1 << " в " << j + 1 << ": ";
                int u = j;
                while (u != i) {
                    if (u == -1) {
                        cout << "Недостижимо";
                        break;
                    }
                    cout << u + 1 << " <- ";
                    u = p[i][u];
                }
                cout << i + 1 << endl;
            }
        }
    }
    return p;
}

int** gen_matrix(const int SIZE)
{
    int ka = 80;
    int kq = 0;
    int** a = new int* [SIZE];
    for (int i = 0; i < SIZE; i++)
    {
        a[i] = new int[SIZE];
    }
    for (int i = 0; i < SIZE; i++)
    {
        int co = 0;
        for (int j = 0; j < SIZE; j++)
        {

            if (!(i == j))
            {
                kq = rand() % 100;
                if (kq < ka) {
                    a[i][j] = (rand() % 200);
                }
                else {
                    a[i][j] = 999;
                    co++;
                }
                if (co == SIZE - 1)
                    a[i][j] = (rand() % 200);

            }
            else {
                a[i][j] = 0;
            }
        }
    }


    return a;
}

int** write_matrix(const int SIZE) {
    int** a = new int* [SIZE];
    for (int i = 0; i < SIZE; i++) {
        a[i] = new int[SIZE];
    }

    cout << "999 - отсутствие ребра" << endl;
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (!(i == j)) {
                cout << "Введите строку " << i + 1 << " столбец " << j + 1 << ": ";

                // Убедимся, что сообщение было выведено
                a[i][j] = getIntegerFromUser(); // Используем функцию для ввода числа
            }
            else {
                a[i][j] = 0;
            }
        }
    }

    return a;
}

void output(const int SIZE, int** a)
{
    //вывод матрицы в консоль
    cout << "Ваша матрица: " << endl;
    cout << endl;
    for (size_t j = 0; j < SIZE; j++) cout << "\t" << "  R" << j + 1;
    cout << endl;
    for (size_t i = 0; i < SIZE; i++)
    {

        cout << "R" << i + 1;

        for (size_t j = 0; j < SIZE; j++)
        {

            cout << "\t| " << a[i][j];


        }
        cout << "\t|" << endl;

    }

}

int** get_matrix(string path, int& SIZE)
{
    int counter = 0;
    ifstream fin;
    fin.open(path);

    if (!fin.is_open())
    {
        cout << "\nОшибка открытия файла" << endl;
    }
    else
    {
        cout << "\nФайл открыт" << endl;
        int temp;
        while (fin >> temp)
        {
            counter++;
        }

    }
    fin.close();

    SIZE = sqrt(counter);
    int** A;
    A = new int* [SIZE];
    for (size_t i = 0; i < SIZE; i++)
    {
        A[i] = new int[SIZE];
    }
    fin.open(path);
    if (!fin.is_open())
    {
        cout << "\nОшибка отрытия файла" << endl;
    }
    else
    {
        for (int i = 0; i < SIZE; i++)
        {
            for (int j = 0; j < SIZE; j++)
            {
                fin >> A[i][j];
            }
        }
    }
    return A;
}

void file_output(string path, const int SIZE, int** a)
{
    ofstream fout;

    fout.open(path);
    if (!fout.is_open())
    {
        cout << "Ошибка отрытия файла" << endl;

    }
    else
    {
        for (int i = 0; i < SIZE; i++)
        {
            for (int j = 0; j < SIZE; j++)
            {
                fout << a[i][j] << " ";
            }
            fout << "\n";
        }
    }
    fout.close();
}


int main()
{
    setlocale(LC_ALL, "rus");
    int SIZE;
    int b;
    int** A;
    string path;
    cout << "\t\t\tКурсовая работа\n\t\tПо дисциплине Л и ОА\n\t\tНа тему: \"Реализация алгоритма Флойда-Уоршелла поиска кратчайших путей в графе\"\n\n\tВыполнил студент группы 22ВВВ3: Гурьянов Данил\n\tПринял: Акифьев И.В";
    getchar();
    system("cls");

    while (true) {
        cout << "--->1. Загрузить из файла" << endl;
        cout << "--->2. Записать через консоль" << endl;
        cout << "--->3. Сгенерировать случайно" << endl;
        cout << "--->0. Выход" << endl;
        b = _getch();

        if (b == '0')
        {
            return 0;
        }
        if (b == '1')
        {
            system("cls");
            cout << "--->Введите путь к файлу: "; cin >> path; cout << endl;
            A = get_matrix(path, SIZE);
            output(SIZE, A);
            FloydWarshall(SIZE, A);
            cout << "--->1.Сохранить в файл" << endl;
            cout << "--->2.Вывести в консоль" << endl;
            b = _getch();
            if (b == '1')
            {
                cout << "Введите путь к файлу: "; cin >> path; cout << endl;
                file_output(path, SIZE, A);
            }
            if (b == '2')
            {
                output(SIZE, A);
            }
        }
        if (b == '2')
        {
            system("cls");
            cout << "\n--->Введите кол-во вершин: "; SIZE = getIntegerFromUser(); cout << endl;
            A = write_matrix(SIZE);
            output(SIZE, A);
            FloydWarshall(SIZE, A);
            cout << "--->1.Сохранить в файл" << endl;
            cout << "--->2.Вывести в консоль" << endl;
            b = _getch();
            if (b == '1')
            {
                cout << "Введите путь к файлу: "; cin >> path; cout << endl;
                file_output(path, SIZE, A);
            }
            if (b == '2')
            {
                output(SIZE, A);
            }
        }
        if (b == '3')
        {
            system("cls");
            cout << "\n--->Введите кол-во вершин: ";  SIZE = getIntegerFromUser(); cout << endl;
            A = gen_matrix(SIZE);
            output(SIZE, A);
            FloydWarshall(SIZE, A);
            cout << "--->1.Сохранить в файл" << endl;
            cout << "--->2.Вывести в консоль" << endl;
            b = _getch();
            if (b == '1')
            {
                cout << "Введите путь к файлу: "; cin >> path; cout << endl;
                file_output(path, SIZE, A);
            }
            if (b == '2')
            {
                output(SIZE, A);
            }
        }

    }
    return 0;
}


